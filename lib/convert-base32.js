// Generated by LiveScript 1.4.0
(function(){
  var sprintfJs, bits2char, char2bits, syms;
  sprintfJs = require('sprintf-js');
  bits2char = {};
  char2bits = [];
  syms = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"].concat(["2", "3", "4", "5", "6", "7"]);
  syms.forEach(function(sym, idx){
    var bin, pump, results$ = [];
    bin = sprintfJs.sprintf('%05b', idx);
    char2bits[sym.toLowerCase().charCodeAt()] = bin;
    char2bits[sym.toUpperCase().charCodeAt()] = bin;
    do {
      bits2char[(typeof pump != 'undefined' && pump !== null ? pump.bin : void 8) || bin] = sym;
      if (!pump) {
        results$.push(pump = {
          bin: bin
        });
      }
    } while (pump.bin.match(/[\s\S]+0$/) && (pump.bin = pump.bin.replace(/([\s\S]+)0$/, '$1')));
    return results$;
  });
  function strToBin(str){
    var pump, arr, len, binaryStr, that;
    pump = {};
    arr = [];
    len = str.length;
    pump.i = 1;
    while (pump.i <= len) {
      pump.d = str.charCodeAt(len - pump.i);
      pump.j = 0;
      while (pump.j < 8) {
        arr.push(pump.d % 2);
        pump.d = Math.floor(pump.d / 2);
        pump.j++;
      }
      pump.i++;
    }
    binaryStr = arr.reverse().join('');
    return binaryStr.concat((that = binaryStr.length % 5) ? repeatString$('0', 5 - that) : '');
  }
  function binToStr(bin){
    return bin.replace(/\s*[01]{8}\s*/g, function(bin){
      return String.fromCharCode(parseInt(bin, 2));
    });
  }
  module.exports = {
    encode: function(str){
      var binaryStr;
      str.split('').forEach(function(char){
        if (char.charCodeAt() > 127) {
          throw new Error('Data contains non-bytes');
        }
      });
      binaryStr = strToBin(str);
      return binaryStr.replace(/([\s\S]{5})/g, function(m, p1){
        return bits2char[p1];
      });
    },
    decode: function(str){
      var binaryStr, padding, paddingRe;
      if (str.match(/[^a-z2-7]/i)) {
        throw new Error('Data contains non-base32 characters');
      }
      binaryStr = str.replace(/([\s\S])/g, function(m, p1){
        return char2bits[p1.charCodeAt()];
      });
      padding = binaryStr.length % 8;
      if (!(padding < 5)) {
        throw new Error('Length of data invalid');
      }
      paddingRe = new RegExp("0{" + padding + "}$");
      if (binaryStr.match(paddingRe)) {
        return binToStr(binaryStr.replace(paddingRe, ''));
      } else {
        throw new Error('Padding bits at the end of output buffer are not all zero');
      }
    }
  };
  function repeatString$(str, n){
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
    return r;
  }
}).call(this);
